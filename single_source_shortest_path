#include <stdio.h>
#define MAX_NODES 100000
typedef struct {
    int node, dist;
} QueueNode;
typedef struct {
    QueueNode queue[MAX_NODES];
    int front, rear;
} Queue;
void initQueue(Queue *q) {
    q->front = 0;
    q->rear = -1;
}
int isEmpty(Queue *q) {
    return q->rear == q->front - 1;
}
void enqueue(Queue *q, int node, int dist) {
    q->queue[++q->rear] = (QueueNode){node, dist};
}
QueueNode dequeue(Queue *q) {
    return q->queue[q->front++];
}
void Don() {
    int nodes, edges,i,j;
    scanf("%d %d", &nodes, &edges);
    int adj[nodes + 1][nodes + 1];
    for (i = 1; i <= nodes; i++) for (j = 1; j <= nodes; j++) adj[i][j] = 0;
    for (i = 0; i < edges; i++) {
        int u, v;
        scanf("%d %d", &u, &v);
        adj[u][v] = adj[v][u] = 1;
    }
    int Distance[nodes + 1], vis[nodes + 1];
    for (i = 1; i <= nodes; i++) Distance[i] = -1;
    Distance[1] = 0;
    for (i = 1; i <= nodes; i++) vis[i] = 0;
    vis[1] = 1;
    Queue q;
    initQueue(&q);
    enqueue(&q, 1, 0);
    while (!isEmpty(&q)) {
        QueueNode current = dequeue(&q);
        int i;
        for (i = 1; i <= nodes; i++) {
            if (adj[current.node][i] && !vis[i]) {
                Distance[i] = current.dist + 1;
                enqueue(&q, i, current.dist + 1);
                vis[i] = 1;
            }
        }
    }
    for (i = 1; i <= nodes; i++) printf("%d\n", Distance[i]);
}
int main() {
    Don();
    return 0;
}
