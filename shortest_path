#include <stdio.h>
#include <stdlib.h>
#include <limits.h>
#define V 5 
#define INF INT_MAX
struct Node {
    int vertex;
    int weight;
    struct Node* next;
};
struct Graph {
    struct Node* array[V];
};
struct Graph* create_graph() {
    struct Graph* graph = (struct Graph*)malloc(sizeof(struct Graph));
    int i;
    for (i = 0; i < V; i++) {
        graph->array[i] = NULL;
    }
    return graph;
}
void add_edge(struct Graph* graph, int src, int dest, int weight) {
    struct Node* new_node = (struct Node*)malloc(sizeof(struct Node));
    new_node->vertex = dest;
    new_node->weight = weight;
    new_node->next = graph->array[src];
    graph->array[src] = new_node;
    new_node = (struct Node*)malloc(sizeof(struct Node));
    new_node->vertex = src;
    new_node->weight = weight;
    new_node->next = graph->array[dest];
    graph->array[dest] = new_node;
}
int min_distance(int dist[], int sptSet[]) {
    int min = INF, min_index;
    int v;
    for (v = 0; v < V; v++) {
        if (sptSet[v] == 0 && dist[v] <= min) {
            min = dist[v];
            min_index = v;
        }
    }
    return min_index;
}
void dijkstra_matrix(int mat[V][V], int src) {
    int dist[V];   
    int sptSet[V];
    int i;
    for (i = 0; i < V; i++) {
        dist[i] = INF;
        sptSet[i] = 0;
    }
    dist[src] = 0;  
    int count;
    for (count = 0; count < V - 1; count++) {
        int u = min_distance(dist, sptSet); 
        sptSet[u] = 1;   
        int v;
        for (v = 0; v < V; v++) {
            if (!sptSet[v] && mat[u][v] != INF && dist[u] != INF && dist[u] + mat[u][v] < dist[v]) {
                dist[v] = dist[u] + mat[u][v];
            }
        }
    }
    printf("Adjacency Matrix Representation:\n");
    printf("Vertex \t Distance from Source\n");
    for (i = 0; i < V; i++) {
        printf("%d \t %d\n", i, dist[i]);
    }
}
void dijkstra_list(struct Graph* graph, int src) {
    int dist[V];  
    int sptSet[V]; 
    int i, count, v;

    for (i = 0; i < V; i++) {
        dist[i] = INF;
        sptSet[i] = 0;
    }
    dist[src] = 0; 
    for (count = 0; count < V - 1; count++) {
        int u = min_distance(dist, sptSet); 
        sptSet[u] = 1; 
        struct Node* temp = graph->array[u];
        while (temp != NULL) {
            v = temp->vertex;
            if (!sptSet[v] && dist[u] != INF && dist[u] + temp->weight < dist[v]) {
                dist[v] = dist[u] + temp->weight;
            }
            temp = temp->next;
        }
    }
    printf("Adjacency List Representation:\n");
    printf("Vertex \t Distance from Source\n");
    for (i = 0; i < V; i++) {
        printf("%d \t %d\n", i, dist[i]);
    }
}
int main() {
    int matrix[V][V] = {
        {0, 9, INF, INF, INF},
        {9, 0, 6, INF, INF},
        {INF, 6, 0, 2, 3},
        {INF, INF, 2, 0, 5},
        {INF, INF, 3, 5, 0}
    };
    struct Graph* graph = create_graph();
    add_edge(graph, 0, 1, 9);
    add_edge(graph, 1, 2, 6);
    add_edge(graph, 2, 3, 2);
    add_edge(graph, 2, 4, 3);
    add_edge(graph, 3, 4, 5);
    int src = 0; 
    dijkstra_matrix(matrix, src);
    dijkstra_list(graph, src);
}
